//
//  UIFont.swift
//  CaseIterable
//
//  Created by nuomi1 on 27/7/2019.
//  Copyright Â© 2019 nuomi1. All rights reserved.
//
%{
import json
import os
import re

dictionary_path = "../../Assets/UIKit/UIFont/"

min_version = 10.3
max_version = 13.4

uifont_available_identifiers = {}

for file in os.listdir(dictionary_path):
    if file[-5:] != ".json":
        break

    with open(dictionary_path + file, "r") as f:
        data = json.load(f)

        version_string = re.findall(r"\d+\.\d+", data["systemVersion"])[0]
        version_float = float(version_string)

        for identifier in data["identifiers"]:
            uifont_available_identifiers[identifier] = uifont_available_identifiers.get(
                identifier, []) + [version_float]

sorted_identifiers = sorted(
    uifont_available_identifiers.items(), key=lambda item: item[0])

def convert(one_string):
    new_string = one_string.replace('-', '')
    new_string = one_string[0].lower() + new_string[1:]
    return new_string
}%

import UIKit

// swiftlint:disable file_length

extension UIFont {

    // swiftlint:disable type_body_length

    public enum SystemName: String {

% for identifier, versions in sorted_identifiers:
%     introduced_version = min(versions)
%     deprecated_version = max(versions) + 0.1
%
%     if deprecated_version != max_version + 0.1:
        @available(iOS, introduced: ${introduced_version}, deprecated: ${deprecated_version})
%     else:
        @available(iOS, introduced: ${introduced_version})
%     end
        case ${convert(identifier)} = "${identifier}"
%
%     if identifier != sorted_identifiers[-1][0]:

%     else:
%     end
% end
    }

    // swiftlint:enable type_body_length
}

extension UIFont {

    public convenience init?(systemName: UIFont.SystemName, size: CGFloat) {
        self.init(name: systemName.rawValue, size: size)
    }
}
